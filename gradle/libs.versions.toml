[versions]
detekt = "1.23.7"
jackson = "2.17.1"
koin = "4.0.0"
kompendium = "3.14.4"
kotlin = "2.0.20"
kotlin-datetime="0.6.0"
kotlin-logging="7.0.0"
kotlin-reactor="1.8.1"
kotlin-serialization = "1.7.1"
kover = "0.8.1"
ktor = "2.3.12"
logback = "1.5.6"
logstash-logback-encoder = "7.4"
micrometer = "1.13.1"
micrometer-context-propagation = "1.1.1"
micrometer-reactor = "1.1.8"
micrometer-tracing = "1.3.0"
netty = "1.1.22"
otel = "1.42.0"
otel-logback-encoder = "2.8.0-alpha"
otel-micrometer = "2.8.0-alpha"
rsocket-micrometer = "1.1.4"
rsocket="0.16.0"
rsocket-transport-ktor="0.15.4"
rsocket-transport-netty="1.1.4"
sonarqube = "5.0.0.4638"
testcontainers = "1.20.0"
kotlin-test = "2.0.20-Beta2"

[libraries]
detekt-ktlint = { module = "io.gitlab.arturbosch.detekt:detekt-formatting", version.ref = "detekt" }
koin = { module="io.insert-koin:koin-ktor", version.ref = "koin" }
kompendium = { module = "io.bkbn:kompendium-core", version.ref = "kompendium" }
kotlin-coroutines-reactor = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-reactor", version.ref = "kotlin-reactor" }
kotlin-datetime = { module = "org.jetbrains.kotlinx:kotlinx-datetime", version.ref = "kotlin-datetime" }
kotlin-logging = { module = "io.github.oshai:kotlin-logging", version.ref = "kotlin-logging" }
kotlin-jackson = { module = "com.fasterxml.jackson.module:jackson-module-kotlin",  version.ref = "jackson" }
kotlin-jackson-cbor = { module = "com.fasterxml.jackson.dataformat:jackson-dataformat-cbor", version.ref = "jackson" }
kotlin-serialization-cbor = { module = "org.jetbrains.kotlinx:kotlinx-serialization-cbor", version.ref = "kotlin-serialization" }
kotlin-serialization-core = { module = "org.jetbrains.kotlinx:kotlinx-serialization-core", version.ref = "kotlin-serialization" }
kotlin-serialization-json = { module = "org.jetbrains.kotlinx:kotlinx-serialization-json", version.ref = "kotlin-serialization" }
kotlin-test = { module = "org.jetbrains.kotlin:kotlin-test", version.ref = "kotlin-test" }
ktor-server-call-id = { module = "io.ktor:ktor-server-call-id", version.ref = "ktor" }
ktor-server-config-yaml = { module = "io.ktor:ktor-server-config-yaml", version.ref = "ktor" }
ktor-server-content-negotiation = { module = "io.ktor:ktor-server-content-negotiation", version.ref = "ktor" }
ktor-server-core = { module = "io.ktor:ktor-server-core", version.ref = "ktor" }
ktor-server-metrics-micrometer = { module = "io.ktor:ktor-server-metrics-micrometer", version.ref = "ktor" }
ktor-server-netty = { module = "io.ktor:ktor-server-netty", version.ref = "ktor" }
ktor-server-openapi = { module = "io.ktor:ktor-server-openapi", version.ref = "ktor" }
ktor-server-request-validation = { module = "io.ktor:ktor-server-request-validation", version.ref = "ktor" }
ktor-server-serialization-kotlinx-cbor = { module = "io.ktor:ktor-serialization-kotlinx-cbor", version.ref = "ktor" }
ktor-server-serialization-kotlinx-json = { module = "io.ktor:ktor-serialization-kotlinx-json", version.ref = "ktor" }
ktor-server-status-pages = { module = "io.ktor:ktor-server-status-pages", version.ref = "ktor" }
ktor-server-swagger = { module = "io.ktor:ktor-server-swagger", version.ref = "ktor" }
ktor-server-tests = { module = "io.ktor:ktor-server-test-host", version.ref = "ktor" }
logback = { module = "ch.qos.logback:logback-classic", version.ref = "logback" }
logback-logstash = { module = "net.logstash.logback:logstash-logback-encoder", version.ref = "logstash-logback-encoder" }
logback-otel = { module = "io.opentelemetry.instrumentation:opentelemetry-logback-appender-1.0", version.ref = "otel-logback-encoder" }
micrometer = { module = "io.micrometer:micrometer-core", version.ref = "micrometer" }
micrometer-context-propagation = { module = "io.micrometer:context-propagation", version.ref = "micrometer-context-propagation" }
micrometer-reactor = { module = "io.projectreactor:reactor-core-micrometer", version.ref = "micrometer-reactor" }
micrometer-tracing = { module = "io.micrometer:micrometer-tracing", version.ref = "micrometer-tracing" }
micrometer-tracing-otel = { module = "io.micrometer:micrometer-tracing-bridge-otel", version.ref = "micrometer-tracing" }
netty = { module = "io.projectreactor.netty:reactor-netty", version.ref = "netty" }
otel-otlp-exporter = { module = "io.opentelemetry:opentelemetry-exporter-otlp", version.ref = "otel" }
otel-micrometer = { module = "io.opentelemetry.instrumentation:opentelemetry-micrometer-1.5", version.ref = "otel-micrometer" }
rsocket-core = { module = "io.rsocket.kotlin:rsocket-core", version.ref = "rsocket" }
rsocket-ktor-client = { module = "io.rsocket.kotlin:rsocket-ktor-client", version.ref = "rsocket" }
rsocket-ktor-server = { module = "io.rsocket.kotlin:rsocket-ktor-server", version.ref = "rsocket" }
rsocket-transport-ktor = { module = "io.rsocket.kotlin:rsocket-transport-ktor", version.ref = "rsocket-transport-ktor" }
rsocket-transport-netty = { module = "io.rsocket:rsocket-transport-netty", version.ref = "rsocket-transport-netty" }
rsocket-micrometer = { module = "io.rsocket:rsocket-micrometer", version.ref = "rsocket-micrometer" }
testcontainers = { module = "org.testcontainers:testcontainers", version.ref = "testcontainers" }

[bundles]

kotlinx = [
    "koin",
    "kotlin-coroutines-reactor",
    "kotlin-datetime",
    "kotlin-logging",
    "kotlin-jackson",
    "kotlin-jackson-cbor",
    "kotlin-serialization-cbor",
    "kotlin-serialization-core",
    "kotlin-serialization-json",
]

logback = ["logback", "logback-logstash", "logback-otel"]
micrometer = [
    "micrometer",
    "otel-micrometer",
    "micrometer-reactor",
    "micrometer-tracing",
    "micrometer-tracing-otel",
    "micrometer-context-propagation"
]

rsocket = [
    "rsocket-core",
    "rsocket-micrometer",
    "rsocket-ktor-client",
    "rsocket-ktor-server",
    "rsocket-transport-ktor",
    "rsocket-transport-netty"
]

test = ["kotlin-test", "testcontainers"]

web = [
    "ktor-server-core",
    "netty",
    "ktor-server-netty",
    "ktor-server-tests",
    "ktor-server-openapi",
    "ktor-server-swagger",
    "ktor-server-content-negotiation",
    "ktor-server-serialization-kotlinx-cbor",
    "ktor-server-serialization-kotlinx-json",
    "ktor-server-config-yaml",
    "ktor-server-metrics-micrometer",
    "ktor-server-call-id",
    "ktor-server-request-validation",
    "ktor-server-status-pages",
    "kompendium"
]

[plugins]
detekt = { id = "io.gitlab.arturbosch.detekt", version.ref = "detekt" }
kotlin = { id = "org.jetbrains.kotlin.jvm", version.ref = "kotlin" }
kotlin-serialization = { id = "org.jetbrains.kotlin.plugin.serialization", version.ref = "kotlin" }
kover = { id = "org.jetbrains.kotlinx.kover", version.ref = "kover" }
ktor = { id = "io.ktor.plugin", version.ref = "ktor" }
sonarqube = { id = "org.sonarqube", version.ref = "sonarqube" }
